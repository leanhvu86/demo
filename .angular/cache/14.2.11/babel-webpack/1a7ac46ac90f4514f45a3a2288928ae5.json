{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bindCallbackInternals = void 0;\n\nvar isScheduler_1 = require(\"../util/isScheduler\");\n\nvar Observable_1 = require(\"../Observable\");\n\nvar subscribeOn_1 = require(\"../operators/subscribeOn\");\n\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\n\nvar observeOn_1 = require(\"../operators/observeOn\");\n\nvar AsyncSubject_1 = require(\"../AsyncSubject\");\n\nfunction bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler_1.isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n\n  if (scheduler) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));\n    };\n  }\n\n  return function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var subject = new AsyncSubject_1.AsyncSubject();\n    var uninitialized = true;\n    return new Observable_1.Observable(function (subscriber) {\n      var subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        var isAsync_1 = false;\n        var isComplete_1 = false;\n        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [function () {\n          var results = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            results[_i] = arguments[_i];\n          }\n\n          if (isNodeStyle) {\n            var err = results.shift();\n\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete_1 = true;\n\n          if (isAsync_1) {\n            subject.complete();\n          }\n        }]));\n\n        if (isComplete_1) {\n          subject.complete();\n        }\n\n        isAsync_1 = true;\n      }\n\n      return subs;\n    });\n  };\n}\n\nexports.bindCallbackInternals = bindCallbackInternals; //# sourceMappingURL=bindCallbackInternals.js.map","map":null,"metadata":{},"sourceType":"script"}