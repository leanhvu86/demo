{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forkJoin = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar argsArgArrayOrObject_1 = require(\"../util/argsArgArrayOrObject\");\n\nvar innerFrom_1 = require(\"./innerFrom\");\n\nvar args_1 = require(\"../util/args\");\n\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\n\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\n\nvar createObject_1 = require(\"../util/createObject\");\n\nfunction forkJoin() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = args_1.popResultSelector(args);\n\n  var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args),\n      sources = _a.args,\n      keys = _a.keys;\n\n  var result = new Observable_1.Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop_1 = function (sourceIndex) {\n      var hasValue = false;\n      innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        return remainingCompletions--;\n      }, undefined, function () {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject_1.createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;\n}\n\nexports.forkJoin = forkJoin; //# sourceMappingURL=forkJoin.js.map","map":null,"metadata":{},"sourceType":"script"}